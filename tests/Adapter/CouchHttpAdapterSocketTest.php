<?php

namespace PHPOnCouch\Adapter;

use PHPOnCouch\Exceptions,
    Exception;

require_once join(DIRECTORY_SEPARATOR, [dirname(__DIR__), '_config', 'config.php']);

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-11-01 at 15:39:08.
 * 
 */
class CouchHttpAdapterSocketTest extends \PHPUnit_Framework_TestCase {

    private $host = 'localhost';
    private $port = '5984';
    private $admin = ["login" => "adm", "password" => "sometest"];
    protected $adapter;

    /**
     *
     * @var PHPOnCouch\CouchClient
     */
    private $client;

    /**
     *
     * @var PHPOnCouch\CouchClient
     */
    private $aclient;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $config = \config::getInstance();
        $url = $config->getUrl($this->host, $this->port, null);
        $aUrl = $config->getUrl($this->host, $this->port, $config->getFirstAdmin());
        $this->client = new CouchClient($url, 'couchclienttest');
        $this->aclient = new CouchClient($aUrl, 'couchclienttest');
        try {
            $this->aclient->deleteDatabase();
        } catch (Exception $e) {
            
        }
        $this->aclient->createDatabase();
        $this->adapter = new \PhpOnCouch\Adapter\CouchHttpAdapterCurl([]);
        $this->adapter->setDsn($admin_config['uri']);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        $this->client = null;
        $this->aclient = null;
        $this->adapter = null;
    }

    public function testAdapterSendToClient() {
        $adapter = $this->adapter;
        $id = 'testid';
        $data = [
            'foo' => 'bar',
        ];
        $response = $adapter->query($adapter::METHODE_PUT, $id, [], $data);
    }

    public function testCustomCurlOptions() {
        $adapter = $this->adapter;
        $adapterOptions = ['curl' => [CURLOPT_URL => 'http://www.example.com/']];
        $addCustomOptions = new \ReflectionMethod($adapter, 'addCustomOptions');
        $addCustomOptions->setAccessible(true);
        $curlHandle = curl_init();
        $adapter->setOptions($adapterOptions);
        $addCustomOptions->invoke($adapter, $curlHandle);
        $info = curl_getinfo($curlHandle);
        $this->assertEquals($adapterOptions['curl'][CURLOPT_URL], $info['url']);
    }

    public function testBuildRequestSendCookie() {
        $sessionCookie = "foo=bar";
        $adapter = $this->adapter;
        $adapter->setSessionCookie($sessionCookie);
        $this->assertTrue($adapter->hasSessionCookie());
        $this->assertEquals($sessionCookie, $adapter->getSessionCookie());
        $buildRequest = new \ReflectionMethod($adapter, 'buildRequest');
        $buildRequest->setAccessible(true);
        $curlHandle = $buildRequest->invokeArgs($adapter,
                [
            'COPY',
            'localhost:8080/_files/return_header.php',
            ['foo' => 'bar'],
            null
        ]);
        curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
        $header = json_decode(curl_exec($curlHandle), true);
        $this->assertArrayHasKey('Cookie', $header);
        $this->assertEquals($sessionCookie, $header['Cookie']);
        $this->assertEquals($adapter->getSessionCookie(), $header['Cookie']);
    }

    public function testBuildRequestSendCustomContentType() {
        $contentType = "foo/bar";
        $adapter = $this->adapter;
        $buildRequest = new \ReflectionMethod($adapter, 'buildRequest');
        $buildRequest->setAccessible(true);
        $curlHandle = $buildRequest->invokeArgs($adapter,
                [
            'COPY',
            'localhost:8080/_files/return_header.php',
            ['foo' => 'bar'],
            $contentType
        ]);
        curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
        $header = json_decode(curl_exec($curlHandle), true);
        $this->assertArrayHasKey('Content-Type', $header);
        $this->assertEquals($contentType, $header['Content-Type']);
    }

    public function testBuildRequestSendDefaultContentType() {
        $defaultContentType = "application/json";
        $adapter = $this->adapter;
        $buildRequest = new \ReflectionMethod($adapter, 'buildRequest');
        $buildRequest->setAccessible(true);
        $curlHandle = $buildRequest->invokeArgs($adapter,
                [
            'COPY',
            'localhost:8080/_files/return_header.php',
            ['foo' => 'bar'],
            null
        ]);
        curl_setopt($curlHandle, CURLOPT_RETURNTRANSFER, true);
        $header = json_decode(curl_exec($curlHandle), true);
        $this->assertArrayHasKey('Content-Type', $header);
        $this->assertEquals($defaultContentType, $header['Content-Type']);
    }

}
