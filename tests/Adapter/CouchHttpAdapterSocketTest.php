<?php

namespace PHPOnCouch\Adapter;

require_once join(DIRECTORY_SEPARATOR, [dirname(dirname(__DIR__)), 'src', 'autoload.php']);

use InvalidArgumentException,
    PHPOnCouch\Exceptions,
    PHPUnit_Framework_TestCase,
    stdClass;

require_once join(DIRECTORY_SEPARATOR, [dirname(__DIR__), '_config', 'config.php']);

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-11-01 at 15:39:08.
 * 
 */
class CouchHttpAdapterSocketTest extends PHPUnit_Framework_TestCase {

    private $host = 'localhost';
    private $port = '5984';
    private $admin = ["login" => "adm", "password" => "sometest"];
    protected $adapter;

    /**
     *
     * @var PHPOnCouch\CouchClient
     */
    private $client;

    /**
     *
     * @var PHPOnCouch\CouchClient
     */
    private $aclient;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $config = \config::getInstance();
//        $url = $config->getUrl($this->host, $this->port, null);
        $this->aUrl = $config->getUrl($this->host, $this->port, $config->getFirstAdmin());
        //$this->client = new CouchClient($url, 'couchclienttest');
//        $this->aclient = new CouchClient($aUrl, 'couchclienttest');
//        try {
//            $this->aclient->deleteDatabase();
//        } catch (Exception $e) {
//            
//        }
//        $this->aclient->createDatabase();
        $this->adapter = new \PHPOnCouch\Adapter\CouchHttpAdapterSocket("http://localhost:5984",[]);
        $this->adapter->setDsn($this->aUrl);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
//        $this->client = null;
//        $this->aclient = null;
        $this->adapter = null;
    }

    public function testBuildRequestSendCookie() {
        $sessionCookie = "foo=bar";
        $adapter = $this->adapter;
        $adapter->setSessionCookie($sessionCookie);
        $this->assertTrue($adapter->hasSessionCookie());
        $this->assertEquals($sessionCookie, $adapter->getSessionCookie());
        $buildRequest = new \ReflectionMethod($adapter, 'buildRequest');
        $buildRequest->setAccessible(true);
        $httpReq = $buildRequest->invokeArgs($adapter,
                [
            'COPY',
            'localhost:8080/_files/return_header.php',
            ['foo' => 'bar'],
            null
        ]);
        $this->assertNotFalse(strpos($httpReq, "Cookie: $sessionCookie"));
        $this->assertNotFalse(strpos($httpReq, "Cookie: " . $adapter->getSessionCookie()));
    }

    public function testBuildRequestSendCustomContentType() {
        $contentType = "foo/bar";
        $data = ['foo' => 'bar'];
        $adapter = $this->adapter;
        $buildRequest = new \ReflectionMethod($adapter, 'buildRequest');
        $buildRequest->setAccessible(true);
        $httpReq = $buildRequest->invokeArgs($adapter,
                [
            'COPY',
            'localhost:8080/_files/return_header.php',
            $data,
                    
        ]);
        $this->assertNotFalse(strpos($httpReq, "Destination: " . json_encode($data)));
    }

    public function testBuildRequestSendDefaultContentType() {
        $defaultContentType = "application/json";
        $adapter = $this->adapter;
        $buildRequest = new \ReflectionMethod($adapter, 'buildRequest');
        $buildRequest->setAccessible(true);
        $httpRequest = $buildRequest->invokeArgs($adapter,
                [
            'POST',
            'localhost:8080/_files/return_header.php',
            ['foo' => 'bar'],
            null
        ]);
        $this->assertNotFalse(strpos($httpRequest, 'application/json'));
        $contentLenght = 'Content-Length: ' . strlen(json_encode(['foo' => 'bar']));
        $this->assertNotFalse(strpos($httpRequest, $contentLenght));
    }
    
    public function testQuery(){
        $response = $this->adapter->query('GET',$this->aUrl+"/_all_docs?limit=5");
        
        
        $this->expectException("\Exception");
        $this->adapter->query("NOEXISTING","something");
    }

}
